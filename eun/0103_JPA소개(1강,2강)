# < 소개영상 >

# JPA 사용이 실무에서 어려운 이유

## 첫째, 올바르게 설계하는 방법을 몰라서

- 연습예제들은 테이블이 단순하고 적지만,
- 실무에서는 수많은 복잡한 객체와 테이블 사용한다.

## 둘째, JPA 동작방식을 이해하지 못해서.

- JPA 내부동작을 이해하지 못해서.
- JPA가 어떤 SQL을 만들어 내느가?
- JPA가 언제 SQL을 실행하는가?

객체와 테이블을 제대로 설계하고 매핑하는 방법

기본 키와 외래 키 매핑

1:N, N:1, N:M 매핑

실무 노하우 + 성능까지 고려

# JPA를 많이 사용하는가?

구글 검색량으로 기준으로 할 때,

- 국내의 경우 아직은 mybatis를 더 사용하지만,  jpa가 절반 이상 거의 따라왔다.
- 2015~2019 기준으로
- 전세계 검색량 기준으로는 JPA가 압도적
- 네이버, 카카오, 쿠팡, 우아한 형제들 다 사용한다. 우아한 형제들의 경우 거의 90퍼센트에 달한다.

---

# < JPA 도입 소개 >

# ORM

- 객체-관계 매핑
    - 객체는 객체지향대로 설계
    - RDB는 관계형대로 설계
- ORM이 중간에서 매핑 (연결)

### Java에서 ORM(JPA)의 작동방식

Java ↔ JPA ↔ JDBC — SQL —> DB

# JPA는 이름대로 API

즉 API표준 명세

- 인터페이스의 모음
- 인터페이스 표준을 만족하는 구현체를 통해서 실행됨

# JPA이전의 자바개발 한계 및 문제점

- 패러다임의 충돌
    - Java와 객체지향과 RDB의 관계형이 충돌한다.
    - 객체 :   객체 상속과 객체 참조, 객체 그래프 탐색.
    - RDB :   슈퍼타입+서브타입 관계와 키참조를 통한 관계
- 그래서 일반적으로 DB설계에 맞추어 백엔드 로직이 만들어진다.
    - 객체지향을 제대로 사용하지 못한다.
    - SQL에 맞추어서 설계가 된다.
- 계층 분리가 안된다.
    - 비즈니스 로직계층과 퍼시스턴스 계층이 분리가 안됨.
    - 엔티티를 신뢰할 수 없다. 백엔드로직의 신뢰성이 DAO에 달려있다.
- 생산성이 적다. (SQL작성에 자원투자)
- 유지보수가 어렵다.

# JPA를 사용하는 이유

모든 새로운 기술은 과거의 기술의 한계를 극복하는 이유로 사용된다.

- 패러다임 불일치의 해결
    - 객체 중심으로 개발
- 생산성과 유지보수 장점
- 성능
    - 1차 캐시와 동일성 보장
    - 트랜잭션을 지원하는 쓰기 지연
    - 지연 로딩
- 데이터 접근 추상화와 벤더 독립성

→ 즉 비유하자면, DB를 객체를 다루듯이, 콜렉션에다가 넣고 쓰듯이 사용할 수 있다.

# JPA를 잘 사용하기 위해서는?

→ JPA도 ORM의 하나

- ORM은 객체와 관계 위에 있는 기술
- 객체지향과 관계형DB를 둘다 배워야함.

---
